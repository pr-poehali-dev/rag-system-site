// API Configuration
export const API_CONFIG = {
  BASE_URL: 'https://d9dbd7681a99.ngrok-free.app',
  ENDPOINTS: {
    QUERY: '/api/query',
    DOCUMENTS: '/api/documents',
    SEARCH: '/api/search'
  }
};

// Database options
export const DATABASE_OPTIONS = [
  { id: '1', name: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π 1', description: '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã' },
  { id: '2', name: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π 2', description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã' }
];

// API function for document AI queries
export const askDocumentAi = async (question: string, dbId: string) => {
  const url = `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.QUERY}`;
  const payload = {
    question: question,
    db_id: dbId
  };

  console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', {
    url,
    method: 'POST',
    payload
  });

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'ngrok-skip-browser-warning': 'true',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type',
      },
      body: JSON.stringify(payload),
    });

    console.log('üì° –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', {
      status: response.status,
      statusText: response.statusText,
      headers: Object.fromEntries(response.headers.entries())
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå HTTP –æ—à–∏–±–∫–∞:', {
        status: response.status,
        statusText: response.statusText,
        body: errorText
      });
      throw new Error(`HTTP error! status: ${response.status}, body: ${errorText}`);
    }

    const data = await response.json();
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);
    
    if (data.status === 'success') {
      return {
        answer: data.data.answer,
        sources: data.data.sources || []
      };
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞:', data);
      throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', {
      name: error.name,
      message: error.message,
      stack: error.stack
    });
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
    if (error.name === 'TypeError' && error.message.includes('fetch')) {
      return { error: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.' };
    } else if (error.message.includes('CORS')) {
      return { error: '–û—à–∏–±–∫–∞ CORS: —Å–µ—Ä–≤–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å —ç—Ç–æ–≥–æ –¥–æ–º–µ–Ω–∞.' };
    } else {
      return { error: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}` };
    }
  }
};